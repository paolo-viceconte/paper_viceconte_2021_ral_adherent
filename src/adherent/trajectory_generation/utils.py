# SPDX-FileCopyrightText: Fondazione Istituto Italiano di Tecnologia
# SPDX-License-Identifier: BSD-3-Clause

import math
import time
import numpy as np
from scenario import core
from typing import List, Dict
from dataclasses import dataclass
from gym_ignition.utils import misc
from scenario import gazebo as scenario
from adherent.MANN.utils import read_from_file
from adherent.data_processing.utils import iCub

import matplotlib as mpl
mpl.rcParams['toolbar'] = 'None'
import matplotlib.pyplot as plt

# =====================
# MODEL INSERTION UTILS
# =====================

@dataclass
class SphereURDF:
    """Class for defining a sphere urdf with parametric radius and color."""

    radius: float = 0.5
    color: tuple = (1, 1, 1, 1)

    def urdf(self) -> str:
        i = 2.0 / 5 * 1.0 * self.radius * self.radius
        urdf = f"""
            <robot name="sphere_robot" xmlns:xacro="http://www.ros.org/wiki/xacro">

                <!-- ====== -->
                <!-- COLORS -->
                <!-- ====== -->
                <material name="custom">
                    <color rgba="{self.color[0]} {self.color[1]} {self.color[2]} {self.color[3]}"/>
                </material>
                <gazebo reference="sphere">
                    <visual>
                      <material>
                        <diffuse>{self.color[0]} {self.color[1]} {self.color[2]} {self.color[3]}</diffuse>
                      </material>
                    </visual>
                    <collision>
                        <surface>
                          <friction>
                            <ode>
                              <mu>0.0</mu>
                            </ode>
                          </friction>
                        </surface>
                    </collision>
                </gazebo>

                <!-- ===== -->
                <!-- LINKS -->
                <!-- ===== -->

                <link name="sphere">
                    <inertial>
                      <origin rpy="0 0 0" xyz="0 0 0"/>
                      <mass value="1.0"/>
                      <inertia ixx="{i}" ixy="0" ixz="0" iyy="{i}" iyz="0" izz="{i}"/>
                    </inertial>
                    <visual>
                      <geometry>
                        <sphere radius="{self.radius}"/>
                      </geometry>
                      <origin rpy="0 0 0" xyz="0 0 0"/>
                      <material name="custom">
                        <color rgba="{self.color[0]} {self.color[1]} {self.color[2]} {self.color[3]}"/>
                      </material>
                    </visual>
                    <collision>
                      <geometry>
                        <sphere radius="{self.radius}"/>
                      </geometry>
                      <origin rpy="0 0 0" xyz="0 0 0"/>
                    </collision>
                </link>
                <gazebo reference="sphere">
                  <collision>
                    <surface>
                      <friction>
                        <ode>
                          <mu>0.0</mu>
                          <mu2>0.0</mu2>
                        </ode>
                      </friction>
                    </surface>
                  </collision>
                </gazebo>
            </robot>"""

        return urdf

class Shape:
    """Helper class to simplify shape insertion."""

    def __init__(self,
                 world: scenario.World,
                 position: List[float] = (0, 0, 0),
                 orientation: List[float] = (1, 0, 0, 0),
                 model_string: str = SphereURDF(radius=0.02).urdf()):
        self.sdf = misc.string_to_file(model_string)

        # Assing incremental default name when multiple shapes are inserted
        name = scenario.get_model_name_from_sdf(self.sdf)
        index = 0
        while name in world.model_names():
            name = f"{name}{index}"

        # Insert the shape in the world
        assert world.insert_model(self.sdf, core.Pose(position, orientation), name)

        # Get and store the model and the world
        self.model = world.get_model(model_name=name)
        self.world = world

# =====================
# JOYSTICK DEVICE UTILS
# =====================

def quadratic_bezier(p0: np.array, p1: np.array, p2: np.array, t: np.array) -> List:
    """Define a discrete quadratic Bezier curve. Given the initial point p0, the control point p1 and
       the final point p2, the quadratic Bezier consists of t points and is defined by:
               Bezier(p0, p1, p2, t) = (1 - t)^2 p0 + 2t (1 - t) p1 + t^2 p2
    """

    quadratic_bezier = []

    for t_i in t:
        p_i = (1 - t_i) * (1 - t_i) * p0 + 2 * t_i * (1 - t_i) * p1 + t_i * t_i * p2
        quadratic_bezier.append(p_i)

    return quadratic_bezier

def compute_angle_wrt_x_positive_semiaxis(current_facing_direction: List) -> float:
    """Compute the angle between the current facing direction and the x positive semiaxis."""

    # Define the x positive semiaxis
    x_positive_semiaxis = np.asarray([1, 0])

    # Compute the yaw between the current facing direction and the world x axis
    cos_theta = np.dot(x_positive_semiaxis, current_facing_direction) # unitary norm vectors
    sin_theta = np.cross(x_positive_semiaxis, current_facing_direction) # unitary norm vectors
    angle = math.atan2(sin_theta, cos_theta)

    return angle

# ===========================
# TRAJECTORY GENERATION UTILS
# ===========================

def define_initial_nn_X(robot: str) -> List:
    """Define the robot-specific initial input X for the network used for trajectory generation."""

    if robot == "iCubV2_5":
        # Initial input manually retrieved from a standing pose
        initial_nn_X = [[0.2119528955450237, -0.0030393414305661757, 0.2088665596830631, -0.0021020581878808007,
                         0.20531231168918174, -0.0008621646186016302, 0.2038031784172399, 0.0006000018873639539,
                         0.20492310200003655, 0.00219387868363895, 0.0, 0.0, -0.2861243642562259, 0.009288430936687906,
                         -0.31823372134674327, 0.0041163061304422335, -0.3351330296979504, 0.00013665165796125482,
                         -0.32760743228415534, 0.0013394518793597135, -0.28954434529500506, -0.002034172225900831,
                         -0.22271595678165187, -0.007108432655308732, 0.4874557110316117, -0.060262978658173996,
                         0.483219430286254, -0.05549580293883961, 0.48355811354675093, -0.05073190069674229,
                         0.48430037825453315, -0.0463878541965186, 0.47622379318033997, -0.042673799121161156, 0.0,
                         -0.001670958751021921, 0.48823702730673707, -0.012628077673047147, 0.4985278001448309,
                         -0.017930827973037217, 0.4894521106023875, -0.013467714394521855, 0.48597445992611943,
                         -0.004418383745209343, 0.4891737721962037, -0.0006736504004182218, 0.4998745767668644,
                         -6.208532325985457e-05, -0.14660114753459738, -0.013635038569482734, -0.14972572660656353,
                         -0.013889675494643422, -0.14485898865197464, -0.014291839679283299, -0.13868430844742163,
                         -0.015641834593965512, -0.14136717424413048, -0.017874811642905507, -0.15142562459589684,
                         -0.020944871631760793, -0.07793121543356057, -0.002198970320957779, 0.12319525161531483,
                         0.002993875070530926, -1.1538873156781917, 0.01723559513698802, -1.495295660555109,
                         0.0010038652592341854, -1.8281665557305795, 0.0006766967160280221, -2.159682389892566,
                         -0.006655788893852345, -2.4211997845061326, -0.9981968, -0.3760584, 0.37910417, 0.65148425,
                         0.3296967, 0.40070292, -1.0328596, -0.36308038, 0.41093844, 0.64171183, 0.28167534, 0.3818131,
                         -1.9024365, 0.00088662654, 0.0018205047, 0.35245338, -0.33301216, -0.21851036, -0.73831433,
                         0.61941016, 0.8847597, -0.98411304, -0.5619794, 0.03115137, -0.091870524, 0.35733885,
                         -0.366953, -0.19864298, -0.71252215, 0.70668554, 0.8847598, -0.98411304, 0.0064472854,
                         -0.003662251, -0.027689233, -0.019645333, -0.010648936, -0.00738357, 0.015316837, 0.04705859,
                         0.011168551, -0.013807453, -0.0048871785, -0.027151093, -0.12258834, -0.028669998, 0.04093896,
                         -0.0797086, -0.010067629, 0.10308291, 0.07587971, -0.0666933, -0.018514698, 0.019428264,
                         0.0027377363, 0.042420693, -0.009432776, 0.048711963, -0.0032096095, -0.0069472883,
                         0.016040523, 0.0183498, -0.01851473, 0.019428236]]

    elif robot == "iCubV3":

        initial_nn_X = [[# Ground base positions (24)
                         0.2093153153400746, 0.0007977258046139854, 0.20609005222050145, 0.000986745220701998,
                         0.20314241555829549, 0.0008129984700562595, 0.20310428485458668, 0.0005334708703526953,
                         0.2069084791909314, 0.000273665059910764, 0.0, 0.0,
                         -0.2232472422836446, 0.016906553732686336, -0.23763955736491932, 0.012247954960142877,
                         -0.2396347171984989, 0.00640033527663368, -0.2346223666143804, 0.00024074823588101713,
                         -0.22949946077789177, -0.0012381187163133316, -0.23020818968443318, 0.000289829887801336,
                         # Ground facing directions (24)
                         0.4957269963196282, -0.0012373414453218808, 0.49478489563771977, -0.00030618142304097214,
                         0.498917645612757, 0.00014946523320548, 0.5032967472677263, 0.00030523234414608826,
                         0.5027608103982335, 0.00029218554773757685, 0.0, 0.00037114062722229965,
                         0.5197881421653958, -0.03483698885704967, 0.5222422003927134, -0.02406628010420433,
                         0.5089169241056959, -0.010965762377245005, 0.4983727031505572, -0.004621132913015527,
                         0.4955035716197332, -0.002032639311416869, 0.5039252645645284, -3.2656064377950355e-07,
                         # Ground base velocities (24)
                         -0.1495995135503391, 0.02664815778662963, -0.1533939683533026, 0.024935301731629254,
                         -0.14722520333253958, 0.02381322536104677, -0.14133079656110978, 0.02354708668948459,
                         -0.14698575936317768, 0.024022722746152348, -0.16189584842751786, 0.024886327367676302,
                         -0.17773365860597093, 0.016890954491782868, -0.2053345150151419, 0.0022135223446622995,
                         -0.17169688282147774, 0.0005774460958900006, -0.14953259567078525, -0.004232617394607505,
                         -0.14436647996928303, -0.004744691775328756, -0.16214723496767933, 0.00020944288948280176,
                         # Future ground trajectory length (1)
                         -2.412285224951282,
                         # Joint positions (32)
                         -1.0755597, -0.38072908, 0.41070947, 0.7459638, 0.33761653, 0.37217963, -1.0772338, -0.31763422,
                         0.44147602, 0.72504324, 0.30771258, 0.34325337, 0.027976118, -1.0567205, 0.04823284, -0.30169612,
                         -0.09575394, -0.22050153, -0.6913654, 0.7512089, -0.7928649, 1.1334503, 0.82532954, 0.018325701,
                         -0.027246535, -0.29481077, -0.05080641, -0.21277831, -0.6838456, 0.99157274, -0.792865, 0.00068516296,
                         # Joint velocities (32)
                         -0.049030505, -0.019967757, 0.026781108, 0.02506639, 0.0011034012, 0.015805595, -0.017600976, 0.016947683,
                         -0.027080724, 0.0019890442, -0.0065035895, -0.01337162, 0.016774062, -0.12414518, 0.013281074, 0.08456575,
                         -0.000790366, -0.010725047, -0.010401212, 0.06744893, -0.018103538, -0.013881947, -0.052590154, -0.02402312,
                         0.04546096, 0.09769335, 0.011065381, -0.027385615, -0.053893577, 0.051078804, -0.018103553, 0.00068191683]]

    elif robot == "ergoCubV1":

        initial_nn_X = [[# Ground base positions (24)
            0.21126064124455635, -0.00036713260010769714, 0.20886300266372512, -0.0003695924081135167,
            0.20645402565381318, -0.0003604535634677853, 0.20641890607622465, -0.00035515558918680835,
            0.20967029739580362, -0.0003621222818047325, 0.0, 0.0,
            -0.2291653083856797, 0.0010798921072872226, -0.2490492176174459, 0.001080339203097057,
            -0.2490138352885897, 0.002822216647651233, -0.24130546511880147, 8.714659150120763e-05,
            -0.23340433984614908, -4.796114865371771e-07, -0.22864370874296483, 0.000645064549267912,
            # Ground facing directions (24)
            0.4942150348748153, 1.5133900321084313e-06, 0.4907375950989224, -9.140217967301278e-07,
            0.4918760972094149, -1.5019216408211414e-06, 0.4942969325957089, -1.1145506688869935e-06,
            0.4939471682166567, -6.312046913620055e-07, 0.0, 0.0020754249732434908,
            0.5259997815485239, 0.020069515503359888, 0.5146907164418114, 0.014284730935538524,
            0.5074869616535806, 0.011855784066191505, 0.5008182265015013, 0.007707347421352704,
            0.49861448577599665, 0.002920201727751729, 0.5035276727921664, 1.3399798393512078e-08,
            # Ground base velocities (24)
            -0.14683308311598753, 0.0023920527557131795, -0.15050320266361372, 0.0024421352650474686,
            -0.14525239867601603, 0.0024587738844478895, -0.14009384314533507, 0.0024911239816431405,
            -0.14552398904754127, 0.002567335280773621, -0.15893219315154467, 0.002681299111475463,
            -0.19629527216421233, 0.003596055954201884, -0.19998472636769163, 0.008360583734743939,
            -0.18236199239913176, -0.006087151029078687, -0.16431341159185325, -0.005091802408460015,
            -0.15466436930790045, 0.0014520372621927087, -0.1607691907814692, 0.0003710887323113083,
            # Future ground trajectory length (1)
            -2.3917475370503043,
            # Joint positions (32)
            -1.0150930881500244, -0.3602990508079529, 0.3601212501525879, 0.6996650099754333,
            0.3355633616447449, 0.37254834175109863, -1.0208966732025146, -0.3418806791305542,
            0.44108936190605164, 0.6801648139953613, 0.31151413917541504, 0.3625253736972809,
            -2.051633834838867, -0.03015667200088501, 0.008174650371074677, -0.7161245346069336,
            -0.04534905403852463, 0.07089600712060928, 0.5651403069496155, -0.8951823115348816,
            0.5697140097618103, -0.6732834577560425, 5.0948151510965545e-06, 0.8230543732643127,
            4.9855216275318526e-06, 0.5785202980041504, -0.8636950850486755, 0.558005154132843,
            -0.6810769438743591, 5.1610427362902556e-06, 0.8230533599853516, -3.242532784497598e-06,
            # Joint velocities (32)
            -0.03084646910429001, -0.011367272585630417, 0.01152132824063301, 0.007485941052436829,
            -0.007818274199962616, 0.013369593769311905, -0.028880421072244644, -0.00601327046751976,
            -0.005391113460063934, 0.028928734362125397, 0.01632467843592167, 8.066743612289429e-05,
            -0.21497130393981934, 0.0011840909719467163, -0.025704368948936462, -0.01040942594408989,
            -0.04307703673839569, 0.0638410672545433, 0.05322853475809097, -0.03271743282675743,
            0.011602410115301609, -0.07073163241147995, -4.984230145055335e-06, -0.3325868844985962,
            -1.1790123153332388e-06, 0.09000563621520996, -0.024635441601276398, 0.029135536402463913,
            -0.13268116116523743, -4.751556843984872e-06, -0.33258703351020813, 1.820973375288304e-05]]

    else:
        raise Exception("Initial network input X only defined for iCubV2_5, iCubV3 and ergoCubV1.")

    return initial_nn_X

def define_initial_past_trajectory(robot: str) -> (List, List, List):
    """Define the robot-specific initialization of the past trajectory data used for trajectory generation."""

    # The above quantities are expressed in the frame specified by the initial base position and the facing direction

    if robot == "iCubV2_5":

        # Initial past base positions manually retrieved from a standing pose
        initial_past_trajectory_base_pos = [[-2.527500857804743e-06, 1.0903062808984249e-06] ,
                                            [-2.455549996614237e-06, 8.803886572792686e-07] ,
                                            [-2.3932266631776817e-06, 6.649728002992855e-07] ,
                                            [-2.2972232373683354e-06, 4.6397690892549415e-07] ,
                                            [-2.2308579804983808e-06, 2.7798276807320084e-07] ,
                                            [-2.1322715325977194e-06, 1.1103651806659623e-07] ,
                                            [-2.046327796860272e-06, -2.2388500172470197e-08] ,
                                            [-1.91939300605379e-06, -1.2993973637506564e-07] ,
                                            [-1.7848048508306453e-06, -2.097749768702241e-07] ,
                                            [-1.6580081802125437e-06, -2.6655044031312915e-07] ,
                                            [-1.5506335119868319e-06, -3.23628716185341e-07] ,
                                            [-1.4382507822849258e-06, -3.792979370625726e-07] ,
                                            [-1.3322899395455997e-06, -4.278829557156832e-07] ,
                                            [-1.1990320437748208e-06, -4.7562891177421024e-07] ,
                                            [-1.0866221826661047e-06, -5.044207604692089e-07] ,
                                            [-9.80810807657339e-07, -5.325817148321178e-07] ,
                                            [-8.863334047551014e-07, -5.468512680224763e-07] ,
                                            [-7.905040249168723e-07, -5.470583225533639e-07] ,
                                            [-7.074973262694693e-07, -5.38629381672685e-07] ,
                                            [-6.303071165194322e-07, -5.263152321588949e-07] ,
                                            [-5.716897048403764e-07, -5.110262834503003e-07] ,
                                            [-5.066074158817677e-07, -4.924134859451942e-07] ,
                                            [-4.4784549927992386e-07, -4.661325089179494e-07] ,
                                            [-3.9028312001614044e-07, -4.434107501461201e-07] ,
                                            [-3.2436071160478275e-07, -4.1887227090496266e-07] ,
                                            [-2.535057110909489e-07, -3.929588356968009e-07] ,
                                            [-2.0702548749656958e-07, -3.6987929130619695e-07] ,
                                            [-1.7514748558341648e-07, -3.4549968709364976e-07] ,
                                            [-1.4179688447983195e-07, -3.194163787979171e-07] ,
                                            [-1.0939292820918823e-07, -2.963270050689199e-07] ,
                                            [-6.774263245123088e-08, -2.7619775701072155e-07] ,
                                            [-6.630167808462936e-08, -2.5455040005178196e-07] ,
                                            [-3.990919142276057e-08, -2.3308221706454332e-07] ,
                                            [-2.6069571555570723e-08, -2.1162333327356798e-07] ,
                                            [-1.2229951619239037e-08, -1.9016444949765335e-07] ,
                                            [9.452203695900181e-09, -1.7020390042718893e-07] ,
                                            [1.7530534406007922e-08, -1.452154242649093e-07] ,
                                            [3.191846606855267e-08, -1.311997696396548e-07] ,
                                            [3.321022965837901e-08, -1.1326591318603561e-07] ,
                                            [5.36476860315707e-08, -9.99635167795042e-08] ,
                                            [4.223771741961101e-08, -8.198966694632613e-08] ,
                                            [3.598676439432403e-08, -6.919877535748602e-08] ,
                                            [3.8223162061722665e-08, -6.12497341268015e-08] ,
                                            [3.149820598011757e-08, -5.1050770640962594e-08] ,
                                            [2.604282036095501e-08, -4.031606592084129e-08] ,
                                            [2.8156909738209697e-08, -2.9224188310317265e-08] ,
                                            [2.3129413790045064e-08, -2.145325373045586e-08] ,
                                            [1.8101917900464274e-08, -1.3682318971157463e-08] ,
                                            [4.677487979852355e-09, -7.552985399694603e-09] ,
                                            [-1.1759048413278252e-09, -3.4926549337154643e-09] ,
                                            [0.0, 0.0]]

        # Initial past facing directions manually retrieved from a standing pose
        initial_past_trajectory_facing_dirs = [[0.9999999999998784, 4.934376399673915e-07] ,
                                            [0.9999999999999241, 3.883830443301208e-07] ,
                                            [0.9999999999999594, 2.821463495649206e-07] ,
                                            [0.9999999999999835, 1.807231158180477e-07] ,
                                            [0.9999999999999963, 8.535124395716517e-08] ,
                                            [1.0000000000000002, 9.495110146062348e-10] ,
                                            [0.9999999999999967, -7.069914455819098e-08] ,
                                            [0.9999999999999911, -1.327795109358243e-07] ,
                                            [0.9999999999999831, -1.824495179004109e-07] ,
                                            [0.9999999999999765, -2.1964274996986627e-07] ,
                                            [0.9999999999999671, -2.554428164090703e-07] ,
                                            [0.9999999999999595, -2.860500471145365e-07] ,
                                            [0.9999999999999512, -3.1256068140015475e-07] ,
                                            [0.9999999999999444, -3.342241151813509e-07] ,
                                            [0.999999999999939, -3.488163792536803e-07] ,
                                            [0.9999999999999362, -3.587520878316053e-07] ,
                                            [0.9999999999999333, -3.647181078934649e-07] ,
                                            [0.9999999999999333, -3.656518532049445e-07] ,
                                            [0.9999999999999355, -3.604237508560707e-07] ,
                                            [0.9999999999999373, -3.532432588410507e-07] ,
                                            [0.9999999999999408, -3.453072935952741e-07] ,
                                            [0.9999999999999449, -3.322190227316333e-07] ,
                                            [0.9999999999999492, -3.1770534303093433e-07] ,
                                            [0.9999999999999537, -3.046830952775645e-07] ,
                                            [0.9999999999999578, -2.895658996148852e-07] ,
                                            [0.9999999999999626, -2.728307865797067e-07] ,
                                            [0.9999999999999672, -2.5398994419411636e-07] ,
                                            [0.9999999999999724, -2.362683911505231e-07] ,
                                            [0.9999999999999765, -2.1854274472284812e-07] ,
                                            [0.99999999999998, -2.0159436423836798e-07] ,
                                            [0.9999999999999829, -1.8619314952582518e-07] ,
                                            [0.9999999999999853, -1.710966566664561e-07] ,
                                            [0.9999999999999882, -1.5782150006104247e-07] ,
                                            [0.9999999999999902, -1.4187221355096398e-07] ,
                                            [0.9999999999999923, -1.279288730330597e-07] ,
                                            [0.9999999999999936, -1.1441170333001461e-07] ,
                                            [0.9999999999999952, -1.0193356359568805e-07] ,
                                            [0.9999999999999959, -9.075195562064845e-08] ,
                                            [0.999999999999997, -7.835940279785413e-08] ,
                                            [0.9999999999999981, -6.509296670491091e-08] ,
                                            [0.9999999999999984, -5.653781670209769e-08] ,
                                            [0.9999999999999989, -4.693018223656109e-08] ,
                                            [0.9999999999999991, -3.870722207066942e-08] ,
                                            [0.9999999999999997, -3.2715551749955996e-08] ,
                                            [0.9999999999999998, -2.6119027498933514e-08] ,
                                            [0.9999999999999998, -2.0193380687761835e-08] ,
                                            [0.9999999999999999, -1.5314869280687055e-08] ,
                                            [0.9999999999999998, -1.1012594852583784e-08] ,
                                            [0.9999999999999999, -6.410947839673635e-09] ,
                                            [0.9999999999999999, -2.944019710205316e-09] ,
                                            [1.0, 0.0]]

        # Initial past base velocities manually retrieved from a standing pose
        initial_past_trajectory_base_vel = [[0.004595956792923562, 0.0006906726560392635] ,
                                            [0.0045962731133142015, 0.0006908424309761764] ,
                                            [0.004596567978123593, 0.0006910410376687015] ,
                                            [0.004596862834577007, 0.0006912729179865158] ,
                                            [0.004597173769486057, 0.000691535857727658] ,
                                            [0.004597463242686157, 0.0006918520298829561] ,
                                            [0.0045977741569838085, 0.0006921970445664722] ,
                                            [0.004598058253058299, 0.0006925731079007134] ,
                                            [0.004598347700354878, 0.0006929924282944024] ,
                                            [0.004598604974585299, 0.000693413958850326] ,
                                            [0.0045987764588005155, 0.0006938221584109283] ,
                                            [0.004598905043551622, 0.0006942414384073563] ,
                                            [0.004599049709822223, 0.00069467957749784] ,
                                            [0.004599183645238337, 0.0006951443327954022] ,
                                            [0.004599339030943579, 0.000695601329633366] ,
                                            [0.004599494415813217, 0.0006960616538338589] ,
                                            [0.004599622999171659, 0.0006964864794345012] ,
                                            [0.004599767674633831, 0.0006968880175371692] ,
                                            [0.004599880189285262, 0.000697242964484982] ,
                                            [0.004599971268409796, 0.00069754688648772] ,
                                            [0.004600030181431484, 0.0006978252906316189] ,
                                            [0.004600073015440465, 0.0006980748535938764] ,
                                            [0.004600105124722687, 0.0006983266321046681] ,
                                            [0.004600158681508706, 0.0006985817433642906] ,
                                            [0.004600196150926055, 0.0006988412870675583] ,
                                            [0.0046002389879988975, 0.0006990786497005439] ,
                                            [0.004600287190220443, 0.0006993038133508321] ,
                                            [0.004600340767060798, 0.0006994790679097653] ,
                                            [0.004600362177798313, 0.0006996288046098593] ,
                                            [0.004600362149388, 0.0006997419349358357] ,
                                            [0.004600356762792291, 0.0006998395362234365] ,
                                            [0.004600372831499294, 0.0006999094148762657] ,
                                            [0.004600367451588363, 0.0006999803972636365] ,
                                            [0.004600372799468059, 0.0007000369637731995] ,
                                            [0.004600356696223029, 0.0007001046161048907] ,
                                            [0.0046003405985486434, 0.0007001500860197236] ,
                                            [0.00460034595339165, 0.0007001789245082144] ,
                                            [0.004600340580444034, 0.0007002221788745127] ,
                                            [0.004600329853489014, 0.000700233267389791] ,
                                            [0.004600313766955935, 0.0007002343724709078] ,
                                            [0.004600297680422851, 0.0007002354775520248] ,
                                            [0.004600265509863483, 0.000700227705626672] ,
                                            [0.004600265515712665, 0.0007002044140889713] ,
                                            [0.004600254794328291, 0.000700193320187391] ,
                                            [0.004600227988360568, 0.0007001755675210279] ,
                                            [0.004600217269204452, 0.0007001556006527045] ,
                                            [0.004600201190191748, 0.0007001267594710629] ,
                                            [0.004600174388680544, 0.000700091260871213] ,
                                            [0.0046001636684102985, 0.0007000757304862618] ,
                                            [0.004600131503978647, 0.0007000435579023651] ,
                                            [0.004600120788443455, 0.0007000091724630841]]

    elif robot == "iCubV3":

        # Initial past base positions manually retrieved from a standing pose
        initial_past_trajectory_base_pos = [[ 0.00032382, -0.00441304] ,
                                            [ 0.00032382, -0.00441304] ,
                                            [ 0.00017552, -0.00454693] ,
                                            [ 0.00014507, -0.0042934 ] ,
                                            [ 0.00028926, -0.00539753] ,
                                            [ 0.00021292, -0.00672033] ,
                                            [ 1.43653700e-05, -6.28351443e-03] ,
                                            [-1.69294213e-05, -5.99196269e-03] ,
                                            [-0.00013613, -0.00588896] ,
                                            [-0.00034968, -0.00599378] ,
                                            [-0.00031321, -0.00583286] ,
                                            [-0.00025302, -0.00559211] ,
                                            [-0.00025302, -0.00559211] ,
                                            [-0.00027122, -0.00538922] ,
                                            [-0.00018935, -0.00519933] ,
                                            [-9.94992632e-05, -5.10004373e-03] ,
                                            [-7.47334197e-07, -4.99227546e-03] ,
                                            [ 4.55484213e-05, -4.86647783e-03] ,
                                            [ 0.00020873, -0.00452156] ,
                                            [ 0.00020873, -0.00452156] ,
                                            [ 0.00022607, -0.00437751] ,
                                            [ 0.00020301, -0.00430956] ,
                                            [ 0.00017392, -0.00382174] ,
                                            [ 0.00019775, -0.00364201] ,
                                            [ 0.00018436, -0.00352034] ,
                                            [ 0.00018001, -0.00333326] ,
                                            [ 0.00011598, -0.00324287] ,
                                            [ 0.00011127, -0.00312052] ,
                                            [ 0.00011192, -0.00283643] ,
                                            [ 0.00011192, -0.00283643] ,
                                            [ 1.36737073e-05, -2.41857507e-03] ,
                                            [ 1.69558665e-05, -2.31992499e-03] ,
                                            [ 2.50252968e-05, -2.22529469e-03] ,
                                            [ 2.45737318e-05, -2.13869837e-03] ,
                                            [ 7.05515027e-05, -1.95082113e-03] ,
                                            [ 7.62982897e-05, -1.75251699e-03] ,
                                            [ 7.62982897e-05, -1.75251699e-03] ,
                                            [ 4.34721031e-05, -1.49183386e-03] ,
                                            [ 7.81701450e-05, -1.41340684e-03] ,
                                            [ 7.81701450e-05, -1.41340684e-03] ,
                                            [ 5.82524840e-05, -1.15226233e-03] ,
                                            [ 5.55633601e-05, -1.05850872e-03] ,
                                            [-4.35889281e-05, -8.97112234e-04] ,
                                            [-4.35889281e-05, -8.97112234e-04] ,
                                            [-5.75118841e-05, -5.72104884e-04] ,
                                            [-5.75118841e-05, -5.72104884e-04] ,
                                            [-4.57644181e-05, -4.82693432e-04] ,
                                            [-1.47681413e-05, -3.05369818e-04] ,
                                            [ 3.69617627e-06, -2.02750524e-04] ,
                                            [ 3.56597084e-05, -1.02450345e-04] ,
                                            [0., 0.]]

        # Initial past facing directions manually retrieved from a standing pose
        initial_past_trajectory_facing_dirs = [[ 0.99998723, -0.00505364] ,
                                               [ 0.99998723, -0.00505364] ,
                                               [ 9.99999671e-01, -8.10942865e-04] ,
                                               [0.99999724, 0.00234933] ,
                                               [0.99999216, 0.00395885] ,
                                               [0.99997349, 0.00728102] ,
                                               [0.99995721, 0.00925107] ,
                                               [0.99993873, 0.01106991] ,
                                               [0.9999193, 0.0127042] ,
                                               [0.99986657, 0.01633543] ,
                                               [0.99985416, 0.0170781 ] ,
                                               [0.99985101, 0.01726124] ,
                                               [0.99985101, 0.01726124] ,
                                               [0.99986401, 0.01649143] ,
                                               [0.99989214, 0.01468729] ,
                                               [0.99990331, 0.01390552] ,
                                               [0.99991387, 0.01312429] ,
                                               [0.99992433, 0.01230212] ,
                                               [0.99995546, 0.00943811] ,
                                               [0.99995546, 0.00943811] ,
                                               [0.99996449, 0.00842695] ,
                                               [0.99997197, 0.00748686] ,
                                               [0.99998924, 0.00463844] ,
                                               [0.99999315, 0.00370074] ,
                                               [0.99999593, 0.00285467] ,
                                               [0.99999818, 0.0019072 ] ,
                                               [9.99999658e-01, 8.26820316e-04] ,
                                               [1.00000000e+00, 2.67268447e-05] ,
                                               [ 0.9999992,  -0.00126258] ,
                                               [ 0.9999992,  -0.00126258] ,
                                               [ 0.99999752, -0.00222908] ,
                                               [ 0.99999694, -0.00247579] ,
                                               [ 0.99999654, -0.00263126] ,
                                               [ 0.99999647, -0.002657  ] ,
                                               [ 0.99999671, -0.00256525] ,
                                               [ 0.99999736, -0.00229701] ,
                                               [ 0.99999736, -0.00229701] ,
                                               [ 0.99999785, -0.00207313] ,
                                               [ 0.99999817, -0.00191158] ,
                                               [ 0.99999817, -0.00191158] ,
                                               [ 0.99999937, -0.00112436] ,
                                               [ 9.99999613e-01, -8.79228064e-04] ,
                                               [ 9.99999872e-01, -5.06732853e-04] ,
                                               [ 9.99999872e-01, -5.06732853e-04] ,
                                               [ 1.00000000e+00, -2.38472635e-05] ,
                                               [ 1.00000000e+00, -2.38472635e-05] ,
                                               [ 9.99999999e-01, -3.51372446e-05] ,
                                               [ 1.00000000e+00, -2.86390532e-05] ,
                                               [ 9.99999991e-01, -1.36341891e-04] ,
                                               [ 9.99999995e-01, -9.84715942e-05] ,
                                               [ 1.00000000e+00, -8.33709159e-17]]

        # Initial past base velocities manually retrieved from a standing pose
        initial_past_trajectory_base_vel = [[0., 0.] ,
                                            [-0.00741492, -0.0066945 ] ,
                                            [-0.00152261,  0.01267647] ,
                                            [ 0.00720999, -0.05520653] ,
                                            [-0.00381725, -0.06613974] ,
                                            [-0.00992773,  0.02184076] ,
                                            [-0.00156474,  0.01457759] ,
                                            [-0.0059598,   0.00514997] ,
                                            [-0.01067761, -0.00524106] ,
                                            [0.00182343, 0.00804631] ,
                                            [0.00300968, 0.01203747] ,
                                            [-4.77893986e-15, -6.22828162e-15] ,
                                            [-0.00091018,  0.01014448] ,
                                            [0.00409357, 0.00949423] ,
                                            [0.00449242, 0.00496455] ,
                                            [0.0049376,  0.00538841] ,
                                            [0.00231479, 0.00628988] ,
                                            [0.00815886, 0.01724593] ,
                                            [ 7.24670881e-16, -5.50361074e-15] ,
                                            [0.00086723, 0.00720266] ,
                                            [-0.00115284,  0.00339745] ,
                                            [-0.00145487,  0.02439101] ,
                                            [0.00119156, 0.00898621] ,
                                            [-0.00066949,  0.00608359] ,
                                            [-0.00021748,  0.00935419] ,
                                            [-0.0032015,   0.00451944] ,
                                            [-0.00023537,  0.00611728] ,
                                            [3.27315787e-05, 1.42044182e-02] ,
                                            [4.05426898e-15, 1.17318924e-14] ,
                                            [-0.00491256,  0.02089297] ,
                                            [0.00016411, 0.0049325 ] ,
                                            [0.00040347, 0.00473151] ,
                                            [-2.25782483e-05,  4.32981606e-03] ,
                                            [0.00229889, 0.00939386] ,
                                            [0.00028734, 0.00991521] ,
                                            [0., 0.] ,
                                            [-0.00164131, 0.01303416] ,
                                            [0.0017349,  0.00392135] ,
                                            [0., 0.] ,
                                            [-0.00099588,  0.01305723] ,
                                            [-0.00013446,  0.00468768] ,
                                            [-0.00495761,  0.00806982] ,
                                            [-5.50361074e-15, -7.24670881e-16] ,
                                            [-0.00069615, 0.01625037] ,
                                            [0., 0.] ,
                                            [0.00058737, 0.00447057] ,
                                            [0.00154981, 0.00886618] ,
                                            [0.00092322, 0.00513096] ,
                                            [0.00159818, 0.00501501] ,
                                            [-0.00178299,  0.00512252] ,
                                            [0., 0.]]

    elif robot == "ergoCubV1":

        # Initial past base positions manually retrieved from a standing pose
        initial_past_trajectory_base_pos = [[-2.4525983213717867e-07, -6.975809882328114e-08] ,
                                            [-2.2344327436956335e-07, -9.263491141171715e-08] ,
                                            [-1.9436342131939362e-07, -1.0783999998152734e-07] ,
                                            [-1.6250258783527665e-07, -1.129883447513048e-07] ,
                                            [-1.395474574062724e-07, -1.2642104945484442e-07] ,
                                            [-1.2891703586607023e-07, -1.266086298747296e-07] ,
                                            [-8.968030008512871e-08, -1.3588544299533094e-07] ,
                                            [-7.841528569061904e-08, -1.4050622487811873e-07] ,
                                            [-5.88352087820279e-08, -1.4417300928131768e-07] ,
                                            [-6.247196650064269e-08, -1.4967619575544551e-07] ,
                                            [-4.763094875020654e-08, -1.480676822362217e-07] ,
                                            [-2.8290643082631496e-08, -1.405078550644637e-07] ,
                                            [-8.140976336603932e-09, -1.43048605709479e-07] ,
                                            [5.209698495265807e-09, -1.350494365968052e-07] ,
                                            [1.864453856157105e-08, -1.2640264928471784e-07] ,
                                            [1.8934465781228015e-08, -1.2745781869056638e-07] ,
                                            [3.3126552538519095e-08, -1.1514297751649374e-07] ,
                                            [4.104176328290591e-08, -1.0716085961258652e-07] ,
                                            [6.20561652084999e-08, -1.0311402426797963e-07] ,
                                            [5.6066621728020606e-08, -1.0357286708594721e-07] ,
                                            [5.639345534150664e-08, -1.022369471264267e-07] ,
                                            [5.5525441440650283e-08, -9.264156173389834e-08] ,
                                            [5.0674382458296524e-08, -8.275811232536074e-08] ,
                                            [6.519947796512609e-08, -7.337540758891175e-08] ,
                                            [5.326112450548404e-08, -6.817576405331165e-08] ,
                                            [6.842072538892837e-08, -6.232807382721999e-08] ,
                                            [5.516487038001275e-08, -5.6970218849720976e-08] ,
                                            [7.087872544041648e-08, -5.247710784422901e-08] ,
                                            [5.6728111749016084e-08, -4.632158356623371e-08] ,
                                            [5.0883313344129744e-08, -4.5062546451360656e-08] ,
                                            [4.513758291792905e-08, -3.5279611383150206e-08] ,
                                            [4.555607708297271e-08, -2.9807026162377406e-08] ,
                                            [3.9106534285458154e-08, -2.9703673049173513e-08] ,
                                            [4.7808490130891986e-08, -2.004964294741561e-08] ,
                                            [3.4316054830500126e-08, -1.8749961176271295e-08] ,
                                            [5.0151156744370066e-08, -1.3014513820728749e-08] ,
                                            [4.344268039262971e-08, -7.891402351122915e-09] ,
                                            [4.4337264340313625e-08, -6.8927016756917005e-09] ,
                                            [4.53235959221356e-08, -2.6555198366506486e-09] ,
                                            [4.5560088767797906e-08, 2.3008390105250562e-09] ,
                                            [3.141573798549465e-08, 3.2901223306188416e-09] ,
                                            [3.2952322350554286e-08, 4.242855719185823e-09] ,
                                            [2.6804188352284173e-08, 4.64151541796809e-09] ,
                                            [1.924697985505423e-08, 1.6353611339495619e-10] ,
                                            [5.609624867518265e-09, 1.5417095712728314e-09] ,
                                            [2.0452219745623622e-08, 7.308031660759899e-09] ,
                                            [5.8224449825230744e-09, 7.818895378908178e-09] ,
                                            [1.376732887981793e-08, 1.200850085857676e-08] ,
                                            [1.4517080315177495e-08, 1.21875084631999e-08] ,
                                            [1.4607508533872508e-08, 7.668884614716481e-09] ,
                                            [0.0, 0.0]]

        # Initial past facing directions manually retrieved from a standing pose
        initial_past_trajectory_facing_dirs = [[0.9999999999999992, 2.9093091923590025e-08] ,
                                                [0.9999999999999994, 2.014911975584149e-08] ,
                                                [0.9999999999999999, 1.3179330542341244e-08] ,
                                                [0.9999999999999998, 6.647496607772829e-09] ,
                                                [1.0, -4.873720972419595e-10] ,
                                                [0.9999999999999997, -4.7268188579709805e-09] ,
                                                [0.9999999999999999, -1.0313678423231605e-08] ,
                                                [0.9999999999999999, -1.5392446914458143e-08] ,
                                                [0.9999999999999994, -1.82230847293005e-08] ,
                                                [0.9999999999999992, -2.5280323210961714e-08] ,
                                                [0.9999999999999999, -2.7486334006365693e-08] ,
                                                [0.9999999999999998, -3.301822727891429e-08] ,
                                                [0.9999999999999998, -3.478949768439227e-08] ,
                                                [1.0000000000000002, -3.593399761419225e-08] ,
                                                [0.999999999999999, -3.796850549693033e-08] ,
                                                [1.0, -3.9978205957751573e-08] ,
                                                [0.9999999999999984, -3.904179780760617e-08] ,
                                                [0.9999999999999997, -3.754982677612068e-08] ,
                                                [0.9999999999999993, -3.5549764562680984e-08] ,
                                                [1.0, -3.5454821146051464e-08] ,
                                                [0.999999999999999, -3.350651660429064e-08] ,
                                                [0.9999999999999992, -3.271680955859227e-08] ,
                                                [0.9999999999999992, -3.194762391867564e-08] ,
                                                [0.9999999999999989, -3.3709256069708154e-08] ,
                                                [0.9999999999999991, -3.1828944614467964e-08] ,
                                                [0.9999999999999988, -3.011692712527426e-08] ,
                                                [0.9999999999999989, -2.717510452336319e-08] ,
                                                [0.9999999999999992, -2.618265803479871e-08] ,
                                                [0.9999999999999992, -2.447064056803139e-08] ,
                                                [0.9999999999999991, -2.389241328611421e-08] ,
                                                [0.9999999999999996, -2.210704526790347e-08] ,
                                                [0.9999999999999994, -2.1044462685288662e-08] ,
                                                [0.9999999999999996, -1.9862129293008285e-08] ,
                                                [0.9999999999999997, -1.6505016049498375e-08] ,
                                                [0.9999999999999998, -1.5396033238852374e-08] ,
                                                [0.9999999999999996, -1.5633391920251134e-08] ,
                                                [0.9999999999999999, -1.3387404474592523e-08] ,
                                                [0.9999999999999997, -1.2323750423983074e-08] ,
                                                [0.9999999999999999, -8.895429593024653e-09] ,
                                                [0.9999999999999998, -7.298876996907437e-09] ,
                                                [0.9999999999999998, -4.910474346202517e-09] ,
                                                [0.9999999999999997, -3.918027891631847e-09] ,
                                                [0.9999999999999998, -3.4574084631499134e-09] ,
                                                [0.9999999999999998, -2.9277244970831855e-09] ,
                                                [0.9999999999999999, -2.4217764023647915e-09] ,
                                                [0.9999999999999999, -3.1672262515143825e-09] ,
                                                [0.9999999999999999, -2.080907882427666e-09] ,
                                                [1.0, 8.155859188058726e-10] ,
                                                [0.9999999999999999, 6.753137875760107e-10] ,
                                                [0.9999999999999999, 7.475929410310381e-10] ,
                                                [1.0, 0.0]]

        # Initial past base velocities manually retrieved from a standing pose
        initial_past_trajectory_base_vel = [[0.02893717126394264, 0.018655631852214995] ,
                                            [0.028937204330499414, 0.01865576250545683] ,
                                            [0.028937248409131044, 0.01865593523098602] ,
                                            [0.028937265617299875, 0.018656099267057937] ,
                                            [0.02893727755450549, 0.018656276648929767] ,
                                            [0.0289372838719281, 0.018656416358233643] ,
                                            [0.028937268726345857, 0.018656553995989453] ,
                                            [0.02893728549469845, 0.018656653704554] ,
                                            [0.02893729685559311, 0.01865674679520928] ,
                                            [0.028937292039612213, 0.018656826686706526] ,
                                            [0.028937298084045406, 0.018656926468592006] ,
                                            [0.028937314655238983, 0.018656997340687688] ,
                                            [0.02893729932766382, 0.018657108360164588] ,
                                            [0.028937299979805185, 0.018657203742330715] ,
                                            [0.028937289817030663, 0.01865728588867839] ,
                                            [0.0289372743226286, 0.01865737250806629] ,
                                            [0.028937269324654808, 0.018657425781284598] ,
                                            [0.028937248407628763, 0.018657503564573356] ,
                                            [0.02893723809319346, 0.01865756352902189] ,
                                            [0.02893722774842602, 0.018657619057090607] ,
                                            [0.028937227930418974, 0.018657645675369507] ,
                                            [0.028937222811116516, 0.018657681203068568] ,
                                            [0.028937206983060765, 0.018657719022278453] ,
                                            [0.028937191139838933, 0.018657754623298467] ,
                                            [0.028937191246001488, 0.018657770150627806] ,
                                            [0.028937153803280095, 0.018657783716390604] ,
                                            [0.028937148608147254, 0.0186578081531401] ,
                                            [0.02893713256776639, 0.01865781491769127] ,
                                            [0.0289371219196774, 0.018657826081961752] ,
                                            [0.028937100532502955, 0.018657835101363304] ,
                                            [0.028937100623499416, 0.01865784841050276] ,
                                            [0.028937100684163726, 0.018657857283262424] ,
                                            [0.028937095322204034, 0.018657857319922883] ,
                                            [0.028937089869247888, 0.018657844047443903] ,
                                            [0.028937079145328497, 0.018657844120764842] ,
                                            [0.0289370790694981, 0.018657833029815305] ,
                                            [0.028937079114996336, 0.018657839684385027] ,
                                            [0.028937073631708013, 0.018657821975526217] ,
                                            [0.02893705748516463, 0.01865781321274801] ,
                                            [0.028937057424500316, 0.018657804339988367] ,
                                            [0.02893705201704239, 0.018657797722079116] ,
                                            [0.028937052017042386, 0.01865779772207912] ,
                                            [0.02893704656408623, 0.018657784449600135] ,
                                            [0.02893704642759153, 0.018657764485890946] ,
                                            [0.02893702487359021, 0.018657749105203486] ,
                                            [0.02893701935996974, 0.018657726959964847] ,
                                            [0.028937013952511807, 0.01865772034205559] ,
                                            [0.02893701923864112, 0.01865770921444557] ,
                                            [0.028937024600600814, 0.018657709177785097] ,
                                            [0.028937024479272187, 0.018657691432265814] ,
                                            [0.028937018935319556, 0.01865766485064737]]

    else:
        raise Exception("Initial past trajectory data only defined for iCubV2_5, iCubV3 and ergoCubV1.")

    return initial_past_trajectory_base_pos, initial_past_trajectory_facing_dirs, initial_past_trajectory_base_vel

def define_initial_base_height(robot: str) -> List:
    """Define the robot-specific initial height of the base frame."""

    if robot == "iCubV2_5":
        initial_base_height = 0.6354

    elif robot == "iCubV3":
        initial_base_height = 0.63

    elif robot == "ergoCubV1":
        initial_base_height = 0.7748

    else:
        raise Exception("Initial base height only defined for iCubV2_5, iCubV3 and ergoCubV1.")

    return initial_base_height

def define_base_pitch_offset(robot: str) -> List:
    """Define the robot-specific pitch offset for the base frame."""

    if robot == "iCubV2_5":
        base_pitch_offset = 0

    elif robot == "iCubV3":
        base_pitch_offset = - 0.09

    elif robot == "ergoCubV1":
        base_pitch_offset = - 0.08

    else:
        raise Exception("Base pitch offset only defined for iCubV2_5, iCubV3 and ergoCubV1.")

    return base_pitch_offset

def define_initial_support_foot_and_vertex(robot: str) -> List:
    """Define the robot-specific initial support foot and vertex."""

    if robot == "iCubV2_5":
        initial_support_foot = "right_foot"
        initial_support_vertex = 0

    elif robot == "iCubV3":
        initial_support_foot = "right_foot"
        initial_support_vertex = 0

    elif robot == "ergoCubV1":
        initial_support_foot = "left_foot"
        initial_support_vertex = 4

    else:
        raise Exception("Initial support foot and vertex only defined for iCubV2_5, iCubV3 and ergoCubV1.")

    return initial_support_foot, initial_support_vertex

def define_initial_base_yaw(robot: str) -> List:
    """Define the robot-specific initial base yaw expressed in the world frame."""

    if robot == "iCubV2_5":
        # For iCubV2_5, the initial base yaw is 180 degs since the x axis of the base frame points backward
        initial_base_yaw = math.pi

    elif robot == "iCubV3":
        # For iCubV3, the initial base yaw is 0 degs since the x axis of the base frame points forward
        initial_base_yaw = 0

    elif robot == "ergoCubV1":
        # For ergoCubV1, the initial base yaw is 0 degs since the x axis of the base frame points forward
        initial_base_yaw = 0

    else:
        raise Exception("Initial base yaw only defined for iCubV2_5, iCubV3 and ergoCubV1.")

    return initial_base_yaw

def define_initial_feet_positions(robot: str) -> (List, List):
    """Define the robot-specific initial positions of the feet frames."""

    if robot == "iCubV2_5":
        l_foot_position = [0, 0.08, 0]
        r_foot_position = [0, -0.08, 0]

    elif robot == "iCubV3":
        l_foot_position = [0, 0.08, 0]
        r_foot_position = [0, -0.08, 0]

    elif robot == "ergoCubV1":
        l_foot_position = [0, 0.08, 0]
        r_foot_position = [0, -0.08, 0]

    else:
        raise Exception("Initial feet position only defined for iCubV2_5, iCubV3 and ergoCubV1.")

    return l_foot_position, r_foot_position

def trajectory_blending(a0: List, a1: List, t: np.array, tau: float) -> List:
    """Blend the vectors a0 and a1 via:
           Blend(a0, a1, t, tau) = (1 - t^tau) a0 + t^tau a1
       Increasing tau means biasing more towards a1.
    """

    blended_trajectory = []

    for i in range(len(t)):
        p_i = (1 - math.pow(t[i], tau)) * np.array(a0[i]) + math.pow(t[i], tau) * np.array(a1[i])
        blended_trajectory.append(p_i.tolist())

    return blended_trajectory

def load_component_wise_input_mean_and_std(datapath: str) -> (Dict, Dict):
    """Compute component-wise input mean and standard deviation."""

    # Full-input mean and std
    Xmean = read_from_file(datapath + 'X_mean.txt')
    Xstd = read_from_file(datapath + 'X_std.txt')

    # Remove zeroes from Xstd
    for i in range(Xstd.size):
        if Xstd[i] == 0:
            Xstd[i] = 1

    # Retrieve component-wise input mean and std (used to normalize the next input for the network)
    Xmean_dict = {"past_base_positions": Xmean[0:12]}
    Xstd_dict = {"past_base_positions": Xstd[0:12]}
    Xmean_dict["future_base_positions"] = Xmean[12:24]
    Xstd_dict["future_base_positions"] = Xstd[12:24]
    Xmean_dict["past_facing_directions"] = Xmean[24:36]
    Xstd_dict["past_facing_directions"] = Xstd[24:36]
    Xmean_dict["future_facing_directions"] = Xmean[36:48]
    Xstd_dict["future_facing_directions"] = Xstd[36:48]
    Xmean_dict["past_base_velocities"] = Xmean[48:60]
    Xstd_dict["past_base_velocities"] = Xstd[48:60]
    Xmean_dict["future_base_velocities"] = Xmean[60:72]
    Xstd_dict["future_base_velocities"] = Xstd[60:72]
    Xmean_dict["future_traj_length"] = Xmean[72]
    Xstd_dict["future_traj_length"] = Xstd[72]
    Xmean_dict["s"] = Xmean[73:105]
    Xstd_dict["s"] = Xstd[73:105]
    Xmean_dict["s_dot"] = Xmean[105:]
    Xstd_dict["s_dot"] = Xstd[105:]

    return Xmean_dict, Xstd_dict

def load_output_mean_and_std(datapath: str) -> (List, List):
    """Compute output mean and standard deviation."""

    # Full-output mean and std
    Ymean = read_from_file(datapath + 'Y_mean.txt')
    Ystd = read_from_file(datapath + 'Y_std.txt')

    # Remove zeroes from Ystd
    for i in range(Ystd.size):
        if Ystd[i] == 0:
            Ystd[i] = 1

    return Ymean, Ystd

# ===================
# VISUALIZATION UTILS
# ===================

def visualize_generated_motion(icub: iCub,
                               controlled_joints_indexes: List,
                               gazebo: scenario.GazeboSimulator,
                               posturals: Dict,
                               raw_data: List,
                               blending_coeffs: Dict,
                               plot_blending_coeffs: bool = False,
                               plot_joystick_inputs: bool = False,
                               plot_com: bool = False,
                               plot_momentum: bool = False) -> None:
    """Visualize the generated motion, optionally along with the joystick inputs used to generate it, the activations
    of the blending coefficients, the com and the momentum evolution during the trajectory generation."""

    # Extract posturals
    joint_pos_posturals = posturals["joints_pos"]
    joint_vel_posturals = posturals["joints_vel"]
    base_posturals = posturals["base"]
    com_pos_posturals = posturals["com_pos"]
    com_vel_posturals = posturals["com_vel"]
    centroidal_momentum_posturals = posturals["centroidal_momentum"]

    # Retrieve blending coefficients
    if plot_blending_coeffs:
        w_1 = blending_coeffs["w_1"]
        w_2 = blending_coeffs["w_2"]
        w_3 = blending_coeffs["w_3"]
        w_4 = blending_coeffs["w_4"]

    # Define controlled joints
    icub_joints = icub.joint_names()

    # Plot configuration
    plt.ion()

    for frame_idx in range(len(joint_pos_posturals)):

        # Debug
        print(frame_idx, "/", len(joint_pos_posturals))

        # Plot configuration
        xticks = [i for i in range(0, frame_idx, 100)]
        xtick_labels = [str(i / 100) for i in range(0, frame_idx, 100)]

        # ======================
        # VISUALIZE ROBOT MOTION
        # ======================

        # Retrieve the current joint positions
        joint_postural = joint_pos_posturals[frame_idx]

        full_joint_positions = np.zeros(len(icub_joints))
        for index in controlled_joints_indexes:
            full_joint_positions[index] = joint_postural[icub_joints[index]]

        # Retrieve the current base position and orientation
        base_postural = base_posturals[frame_idx]
        base_position = base_postural['position']
        base_quaternion = base_postural['wxyz_quaternions']

        # Reset the robot configuration in the simulator
        icub.to_gazebo().reset_base_pose(base_position, base_quaternion)
        icub.to_gazebo().reset_joint_positions(full_joint_positions, icub_joints)
        gazebo.run(paused=True)

        # =====================================
        # PLOT THE MOTION DIRECTION ON FIGURE 1
        # =====================================

        if plot_joystick_inputs:

            # Retrieve the current motion direction
            curr_raw_data = raw_data[frame_idx]
            curr_x = curr_raw_data[0]
            curr_y = curr_raw_data[1]

            plt.figure(1)
            plt.clf()

            # Circumference of unitary radius
            r = 1
            x = np.linspace(-r, r, 1000)
            y = np.sqrt(-x ** 2 + r ** 2)
            plt.plot(x, y, 'r')
            plt.plot(x, -y, 'r')

            # Motion direction
            plt.scatter(0, 0, c='r')
            desired_motion_direction = plt.arrow(0, 0, curr_x, -curr_y, length_includes_head=True, width=0.01,
                                                 head_width=8 * 0.01, head_length=1.8 * 8 * 0.01, color='r')

            # Plot configuration
            plt.axis('scaled')
            plt.xlim([-1.2, 1.2])
            plt.ylim([-1.4, 1.2])
            plt.axis('off')
            plt.legend([desired_motion_direction], ['DESIRED MOTION DIRECTION'], loc="lower center")

        # =====================================
        # PLOT THE FACING DIRECTION ON FIGURE 2
        # =====================================

        if plot_joystick_inputs:

            # Retrieve the current facing direction
            curr_z = curr_raw_data[2]
            curr_rz = curr_raw_data[3]

            plt.figure(2)
            plt.clf()

            # Circumference of unitary norm
            r = 1
            x = np.linspace(-r, r, 1000)
            y = np.sqrt(-x ** 2 + r ** 2)
            plt.plot(x, y, 'b')
            plt.plot(x, -y, 'b')

            # Facing direction
            plt.scatter(0, 0, c='b')
            desired_facing_direction = plt.arrow(0, 0, curr_z, -curr_rz, length_includes_head=True, width=0.01,
                                                 head_width=8 * 0.01, head_length=1.8 * 8 * 0.01, color='b')

            # Plot configuration
            plt.axis('scaled')
            plt.xlim([-1.2, 1.2])
            plt.ylim([-1.4, 1.2])
            plt.axis('off')
            plt.legend([desired_facing_direction], ['DESIRED FACING DIRECTION'], loc="lower center")

        # ==========================================
        # PLOT THE BLENDING COEFFICIENTS ON FIGURE 3
        # ==========================================

        if plot_blending_coeffs:

            # Retrieve the blending coefficients up to the current time
            curr_w_1 = w_1[:frame_idx]
            curr_w_2 = w_2[:frame_idx]
            curr_w_3 = w_3[:frame_idx]
            curr_w_4 = w_4[:frame_idx]

            plt.figure(3)
            plt.clf()

            plt.plot(range(len(curr_w_1)), curr_w_1, 'r')
            plt.plot(range(len(curr_w_2)), curr_w_2, 'b')
            plt.plot(range(len(curr_w_3)), curr_w_3, 'g')
            plt.plot(range(len(curr_w_4)), curr_w_4, 'y')

            # Plot configuration
            plt.xticks(xticks, xtick_labels)
            plt.title("Blending coefficients profiles")
            plt.xlim([0, len(w_1)])
            plt.ylabel("Blending coefficients")
            plt.xlabel("Time [s]")

        # ============
        # PLOT COM POS
        # ============

        if plot_com:

            # Retrieve the com pos posturals up to the current time
            com_pos_postural = com_pos_posturals[:frame_idx]
            com_pos_postural_x = [elem[0] for elem in com_pos_postural]
            com_pos_postural_y = [elem[1] for elem in com_pos_postural]
            com_pos_postural_z = [elem[2] for elem in com_pos_postural]

            plt.figure(4)
            plt.clf()

            plt.plot(range(len(com_pos_postural_x)), com_pos_postural_x, label='x', color='r')
            plt.plot(range(len(com_pos_postural_y)), com_pos_postural_y, label='y', color='y')
            plt.plot(range(len(com_pos_postural_z)), com_pos_postural_z, label='z', color='b')

            # Plot configuration
            plt.xticks(xticks, xtick_labels)
            plt.title("Com positions")
            plt.ylabel("CoM positions [m]")
            plt.xlabel("Time [s]")
            plt.legend()

        # ============
        # PLOT COM VEL
        # ============

        if plot_com:

            # Retrieve the com vel posturals up to the current time
            com_vel_postural = com_vel_posturals[:frame_idx]
            com_vel_postural_x = [elem[0] for elem in com_vel_postural]
            com_vel_postural_y = [elem[1] for elem in com_vel_postural]
            com_vel_postural_z = [elem[2] for elem in com_vel_postural]

            plt.figure(5)
            plt.clf()

            plt.plot(range(len(com_vel_postural_x)), com_vel_postural_x, label='x', color='r')
            plt.plot(range(len(com_vel_postural_y)), com_vel_postural_y, label='y', color='y')
            plt.plot(range(len(com_vel_postural_z)), com_vel_postural_z, label='z', color='b')

            # Plot configuration
            plt.xticks(xticks, xtick_labels)
            plt.title("Com velocities")
            plt.ylabel("CoM velocities [m/s]")
            plt.xlabel("Time [s]")
            plt.legend()

        # ====================
        # PLOT LINEAR MOMENTUM
        # ====================

        if plot_momentum:

            # Retrieve the linear momentum postural up to the current time
            centroidal_momentum_postural = centroidal_momentum_posturals[:frame_idx]
            linear_momentum_postural = [elem[0] for elem in centroidal_momentum_postural]
            linear_momentum_postural_x = [elem[0] for elem in linear_momentum_postural]
            linear_momentum_postural_y = [elem[1] for elem in linear_momentum_postural]
            linear_momentum_postural_z = [elem[2] for elem in linear_momentum_postural]

            plt.figure(6)
            plt.clf()

            plt.plot(range(len(linear_momentum_postural_x)), linear_momentum_postural_x, label='x', color='r')
            plt.plot(range(len(linear_momentum_postural_y)), linear_momentum_postural_y, label='y', color='y')
            plt.plot(range(len(linear_momentum_postural_z)), linear_momentum_postural_z, label='z', color='b')

            # Plot configuration
            plt.xticks(xticks, xtick_labels)
            plt.title("Linear momentum")
            plt.ylabel("Linear momentum [kg * m/s]")
            plt.xlabel("Time [s]")
            plt.legend()

        # =====================
        # PLOT ANGULAR MOMENTUM
        # =====================

        if plot_momentum:

            # Retrieve the angular momentum postural up to the current time
            angular_momentum_postural = [elem[1] for elem in centroidal_momentum_postural]
            angular_momentum_postural_x = [elem[0] for elem in angular_momentum_postural]
            angular_momentum_postural_y = [elem[1] for elem in angular_momentum_postural]
            angular_momentum_postural_z = [elem[2] for elem in angular_momentum_postural]

            plt.figure(7)
            plt.clf()

            plt.plot(range(len(angular_momentum_postural_x)), angular_momentum_postural_x, label='x', color='r')
            plt.plot(range(len(angular_momentum_postural_y)), angular_momentum_postural_y, label='y', color='y')
            plt.plot(range(len(angular_momentum_postural_z)), angular_momentum_postural_z, label='z', color='b')


            # Plot configuration
            plt.xticks(xticks, xtick_labels)
            plt.title("Angular momentum")
            plt.ylabel("Angular momentum [kg * m * m/s]")
            plt.xlabel("Time [s/]")
            plt.legend()

        if plot_blending_coeffs or plot_joystick_inputs or plot_com or plot_momentum:
            # Plot
            plt.show()
            plt.pause(0.0001)
        else:
            # Show robot motion in real time
            time.sleep(0.01)

    input("Press Enter to end the visualization of the generated trajectory.")

